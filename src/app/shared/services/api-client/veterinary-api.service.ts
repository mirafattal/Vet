//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class APIClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getOwnerbyAnimalID(id: number | undefined): Observable<GetAnimalbyOwnerIDdto[]> {
        let url_ = this.baseUrl + "/api/Animal/GetOwnerbyAnimalID?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetOwnerbyAnimalID(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetOwnerbyAnimalID(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetAnimalbyOwnerIDdto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetAnimalbyOwnerIDdto[]>;
        }));
    }

    protected processGetOwnerbyAnimalID(response: HttpResponseBase): Observable<GetAnimalbyOwnerIDdto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetAnimalbyOwnerIDdto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param animalId (optional) 
     * @return OK
     */
    getAnimalbyId(animalId: number | undefined): Observable<AnimalDto[]> {
        let url_ = this.baseUrl + "/api/Animal/GetAnimalbyId?";
        if (animalId === null)
            throw new Error("The parameter 'animalId' cannot be null.");
        else if (animalId !== undefined)
            url_ += "animalId=" + encodeURIComponent("" + animalId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAnimalbyId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAnimalbyId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AnimalDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AnimalDto[]>;
        }));
    }

    protected processGetAnimalbyId(response: HttpResponseBase): Observable<AnimalDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AnimalDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getAll(): Observable<AnimalDtoIEnumerableApiResponse> {
        let url_ = this.baseUrl + "/api/Animal/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AnimalDtoIEnumerableApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AnimalDtoIEnumerableApiResponse>;
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<AnimalDtoIEnumerableApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AnimalDtoIEnumerableApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getById(id: number | undefined): Observable<AnimalDtoApiResponse> {
        let url_ = this.baseUrl + "/api/Animal/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AnimalDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AnimalDtoApiResponse>;
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<AnimalDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AnimalDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    add(body: AnimalDto | undefined): Observable<AnimalDtoApiResponse> {
        let url_ = this.baseUrl + "/api/Animal/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AnimalDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AnimalDtoApiResponse>;
        }));
    }

    protected processAdd(response: HttpResponseBase): Observable<AnimalDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AnimalDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update(body: AnimalDto | undefined): Observable<AnimalDtoApiResponse> {
        let url_ = this.baseUrl + "/api/Animal/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AnimalDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AnimalDtoApiResponse>;
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<AnimalDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AnimalDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById(id: number | undefined): Observable<BooleanApiResponse> {
        let url_ = this.baseUrl + "/api/Animal/DeleteById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanApiResponse>;
        }));
    }

    protected processDeleteById(response: HttpResponseBase): Observable<BooleanApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    delete(body: AnimalDto | undefined): Observable<BooleanApiResponse> {
        let url_ = this.baseUrl + "/api/Animal/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanApiResponse>;
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<BooleanApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getAll2(): Observable<AnimalTypeDtoIEnumerableApiResponse> {
        let url_ = this.baseUrl + "/api/AnimalType/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AnimalTypeDtoIEnumerableApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AnimalTypeDtoIEnumerableApiResponse>;
        }));
    }

    protected processGetAll2(response: HttpResponseBase): Observable<AnimalTypeDtoIEnumerableApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AnimalTypeDtoIEnumerableApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getById2(id: number | undefined): Observable<AnimalTypeDtoApiResponse> {
        let url_ = this.baseUrl + "/api/AnimalType/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AnimalTypeDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AnimalTypeDtoApiResponse>;
        }));
    }

    protected processGetById2(response: HttpResponseBase): Observable<AnimalTypeDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AnimalTypeDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    add2(body: AnimalTypeDto | undefined): Observable<AnimalTypeDtoApiResponse> {
        let url_ = this.baseUrl + "/api/AnimalType/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AnimalTypeDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AnimalTypeDtoApiResponse>;
        }));
    }

    protected processAdd2(response: HttpResponseBase): Observable<AnimalTypeDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AnimalTypeDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update2(body: AnimalTypeDto | undefined): Observable<AnimalTypeDtoApiResponse> {
        let url_ = this.baseUrl + "/api/AnimalType/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AnimalTypeDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AnimalTypeDtoApiResponse>;
        }));
    }

    protected processUpdate2(response: HttpResponseBase): Observable<AnimalTypeDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AnimalTypeDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById2(id: number | undefined): Observable<BooleanApiResponse> {
        let url_ = this.baseUrl + "/api/AnimalType/DeleteById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteById2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteById2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanApiResponse>;
        }));
    }

    protected processDeleteById2(response: HttpResponseBase): Observable<BooleanApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    delete2(body: AnimalTypeDto | undefined): Observable<BooleanApiResponse> {
        let url_ = this.baseUrl + "/api/AnimalType/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete2(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete2(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanApiResponse>;
        }));
    }

    protected processDelete2(response: HttpResponseBase): Observable<BooleanApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    appointmentsforthisweek(): Observable<AppointmentDto[]> {
        let url_ = this.baseUrl + "/api/Appointment/appointmentsforthisweek";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAppointmentsforthisweek(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAppointmentsforthisweek(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AppointmentDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AppointmentDto[]>;
        }));
    }

    protected processAppointmentsforthisweek(response: HttpResponseBase): Observable<AppointmentDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AppointmentDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    appointmentsforthismonth(): Observable<AppointmentDto[]> {
        let url_ = this.baseUrl + "/api/Appointment/appointmentsforthismonth";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAppointmentsforthismonth(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAppointmentsforthismonth(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AppointmentDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AppointmentDto[]>;
        }));
    }

    protected processAppointmentsforthismonth(response: HttpResponseBase): Observable<AppointmentDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AppointmentDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param animalId (optional) 
     * @return OK
     */
    getappointmentbyanimalId(animalId: number | undefined): Observable<AppointmentDto[]> {
        let url_ = this.baseUrl + "/api/Appointment/GetappointmentbyanimalId?";
        if (animalId === null)
            throw new Error("The parameter 'animalId' cannot be null.");
        else if (animalId !== undefined)
            url_ += "animalId=" + encodeURIComponent("" + animalId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetappointmentbyanimalId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetappointmentbyanimalId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AppointmentDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AppointmentDto[]>;
        }));
    }

    protected processGetappointmentbyanimalId(response: HttpResponseBase): Observable<AppointmentDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AppointmentDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getAll3(): Observable<AppointmentDtoIEnumerableApiResponse> {
        let url_ = this.baseUrl + "/api/Appointment/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll3(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll3(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AppointmentDtoIEnumerableApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AppointmentDtoIEnumerableApiResponse>;
        }));
    }

    protected processGetAll3(response: HttpResponseBase): Observable<AppointmentDtoIEnumerableApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppointmentDtoIEnumerableApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getById3(id: number | undefined): Observable<AppointmentDtoApiResponse> {
        let url_ = this.baseUrl + "/api/Appointment/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById3(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById3(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AppointmentDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AppointmentDtoApiResponse>;
        }));
    }

    protected processGetById3(response: HttpResponseBase): Observable<AppointmentDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppointmentDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    add3(body: AppointmentDto | undefined): Observable<AppointmentDtoApiResponse> {
        let url_ = this.baseUrl + "/api/Appointment/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd3(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd3(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AppointmentDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AppointmentDtoApiResponse>;
        }));
    }

    protected processAdd3(response: HttpResponseBase): Observable<AppointmentDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppointmentDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update3(body: AppointmentDto | undefined): Observable<AppointmentDtoApiResponse> {
        let url_ = this.baseUrl + "/api/Appointment/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate3(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate3(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AppointmentDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AppointmentDtoApiResponse>;
        }));
    }

    protected processUpdate3(response: HttpResponseBase): Observable<AppointmentDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AppointmentDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById3(id: number | undefined): Observable<BooleanApiResponse> {
        let url_ = this.baseUrl + "/api/Appointment/DeleteById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteById3(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteById3(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanApiResponse>;
        }));
    }

    protected processDeleteById3(response: HttpResponseBase): Observable<BooleanApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    delete3(body: AppointmentDto | undefined): Observable<BooleanApiResponse> {
        let url_ = this.baseUrl + "/api/Appointment/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete3(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete3(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanApiResponse>;
        }));
    }

    protected processDelete3(response: HttpResponseBase): Observable<BooleanApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    auth(body: LoginRequestDto | undefined): Observable<BooleanApiResponse> {
        let url_ = this.baseUrl + "/api/Auth";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAuth(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAuth(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanApiResponse>;
        }));
    }

    protected processAuth(response: HttpResponseBase): Observable<BooleanApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    login(body: LoginRequestDto | undefined): Observable<AuthResponseDto> {
        let url_ = this.baseUrl + "/api/Auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AuthResponseDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AuthResponseDto>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<AuthResponseDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthResponseDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getAll4(): Observable<InventoryDtoIEnumerableApiResponse> {
        let url_ = this.baseUrl + "/api/Inventory/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll4(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll4(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<InventoryDtoIEnumerableApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<InventoryDtoIEnumerableApiResponse>;
        }));
    }

    protected processGetAll4(response: HttpResponseBase): Observable<InventoryDtoIEnumerableApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InventoryDtoIEnumerableApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getById4(id: number | undefined): Observable<InventoryDtoApiResponse> {
        let url_ = this.baseUrl + "/api/Inventory/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById4(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById4(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<InventoryDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<InventoryDtoApiResponse>;
        }));
    }

    protected processGetById4(response: HttpResponseBase): Observable<InventoryDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InventoryDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    add4(body: InventoryDto | undefined): Observable<InventoryDtoApiResponse> {
        let url_ = this.baseUrl + "/api/Inventory/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd4(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd4(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<InventoryDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<InventoryDtoApiResponse>;
        }));
    }

    protected processAdd4(response: HttpResponseBase): Observable<InventoryDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InventoryDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update4(body: InventoryDto | undefined): Observable<InventoryDtoApiResponse> {
        let url_ = this.baseUrl + "/api/Inventory/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate4(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate4(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<InventoryDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<InventoryDtoApiResponse>;
        }));
    }

    protected processUpdate4(response: HttpResponseBase): Observable<InventoryDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InventoryDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById4(id: number | undefined): Observable<BooleanApiResponse> {
        let url_ = this.baseUrl + "/api/Inventory/DeleteById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteById4(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteById4(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanApiResponse>;
        }));
    }

    protected processDeleteById4(response: HttpResponseBase): Observable<BooleanApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    delete4(body: InventoryDto | undefined): Observable<BooleanApiResponse> {
        let url_ = this.baseUrl + "/api/Inventory/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete4(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete4(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanApiResponse>;
        }));
    }

    protected processDelete4(response: HttpResponseBase): Observable<BooleanApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getAll5(): Observable<InvoiceDtoIEnumerableApiResponse> {
        let url_ = this.baseUrl + "/api/Invoice/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll5(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll5(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<InvoiceDtoIEnumerableApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<InvoiceDtoIEnumerableApiResponse>;
        }));
    }

    protected processGetAll5(response: HttpResponseBase): Observable<InvoiceDtoIEnumerableApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InvoiceDtoIEnumerableApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getById5(id: number | undefined): Observable<InvoiceDtoApiResponse> {
        let url_ = this.baseUrl + "/api/Invoice/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById5(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById5(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<InvoiceDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<InvoiceDtoApiResponse>;
        }));
    }

    protected processGetById5(response: HttpResponseBase): Observable<InvoiceDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InvoiceDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    add5(body: InvoiceDto | undefined): Observable<InvoiceDtoApiResponse> {
        let url_ = this.baseUrl + "/api/Invoice/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd5(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd5(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<InvoiceDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<InvoiceDtoApiResponse>;
        }));
    }

    protected processAdd5(response: HttpResponseBase): Observable<InvoiceDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InvoiceDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update5(body: InvoiceDto | undefined): Observable<InvoiceDtoApiResponse> {
        let url_ = this.baseUrl + "/api/Invoice/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate5(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate5(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<InvoiceDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<InvoiceDtoApiResponse>;
        }));
    }

    protected processUpdate5(response: HttpResponseBase): Observable<InvoiceDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InvoiceDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById5(id: number | undefined): Observable<BooleanApiResponse> {
        let url_ = this.baseUrl + "/api/Invoice/DeleteById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteById5(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteById5(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanApiResponse>;
        }));
    }

    protected processDeleteById5(response: HttpResponseBase): Observable<BooleanApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    delete5(body: InvoiceDto | undefined): Observable<BooleanApiResponse> {
        let url_ = this.baseUrl + "/api/Invoice/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete5(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete5(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanApiResponse>;
        }));
    }

    protected processDelete5(response: HttpResponseBase): Observable<BooleanApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param animalId (optional) 
     * @return OK
     */
    getmedicalrecordsbyanimalId(animalId: number | undefined): Observable<MedicalRecordDto[]> {
        let url_ = this.baseUrl + "/api/MedicalRecord/GetmedicalrecordsbyanimalId?";
        if (animalId === null)
            throw new Error("The parameter 'animalId' cannot be null.");
        else if (animalId !== undefined)
            url_ += "animalId=" + encodeURIComponent("" + animalId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetmedicalrecordsbyanimalId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetmedicalrecordsbyanimalId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MedicalRecordDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MedicalRecordDto[]>;
        }));
    }

    protected processGetmedicalrecordsbyanimalId(response: HttpResponseBase): Observable<MedicalRecordDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(MedicalRecordDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getAll6(): Observable<MedicalRecordDtoIEnumerableApiResponse> {
        let url_ = this.baseUrl + "/api/MedicalRecord/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll6(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll6(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MedicalRecordDtoIEnumerableApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MedicalRecordDtoIEnumerableApiResponse>;
        }));
    }

    protected processGetAll6(response: HttpResponseBase): Observable<MedicalRecordDtoIEnumerableApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MedicalRecordDtoIEnumerableApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getById6(id: number | undefined): Observable<MedicalRecordDtoApiResponse> {
        let url_ = this.baseUrl + "/api/MedicalRecord/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById6(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById6(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MedicalRecordDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MedicalRecordDtoApiResponse>;
        }));
    }

    protected processGetById6(response: HttpResponseBase): Observable<MedicalRecordDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MedicalRecordDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    add6(body: MedicalRecordDto | undefined): Observable<MedicalRecordDtoApiResponse> {
        let url_ = this.baseUrl + "/api/MedicalRecord/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd6(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd6(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MedicalRecordDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MedicalRecordDtoApiResponse>;
        }));
    }

    protected processAdd6(response: HttpResponseBase): Observable<MedicalRecordDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MedicalRecordDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update6(body: MedicalRecordDto | undefined): Observable<MedicalRecordDtoApiResponse> {
        let url_ = this.baseUrl + "/api/MedicalRecord/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate6(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate6(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<MedicalRecordDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<MedicalRecordDtoApiResponse>;
        }));
    }

    protected processUpdate6(response: HttpResponseBase): Observable<MedicalRecordDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = MedicalRecordDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById6(id: number | undefined): Observable<BooleanApiResponse> {
        let url_ = this.baseUrl + "/api/MedicalRecord/DeleteById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteById6(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteById6(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanApiResponse>;
        }));
    }

    protected processDeleteById6(response: HttpResponseBase): Observable<BooleanApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    delete6(body: MedicalRecordDto | undefined): Observable<BooleanApiResponse> {
        let url_ = this.baseUrl + "/api/MedicalRecord/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete6(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete6(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanApiResponse>;
        }));
    }

    protected processDelete6(response: HttpResponseBase): Observable<BooleanApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param ownerId (optional) 
     * @return OK
     */
    getAnimalsByOwnerId(ownerId: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Owner/GetAnimalsByOwnerId?";
        if (ownerId === null)
            throw new Error("The parameter 'ownerId' cannot be null.");
        else if (ownerId !== undefined)
            url_ += "ownerId=" + encodeURIComponent("" + ownerId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAnimalsByOwnerId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAnimalsByOwnerId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processGetAnimalsByOwnerId(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param animalId (optional) 
     * @return OK
     */
    ownerbyanimalID(animalId: number | undefined): Observable<OwnerDto> {
        let url_ = this.baseUrl + "/api/Owner/ownerbyanimalID?";
        if (animalId === null)
            throw new Error("The parameter 'animalId' cannot be null.");
        else if (animalId !== undefined)
            url_ += "animalId=" + encodeURIComponent("" + animalId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processOwnerbyanimalID(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processOwnerbyanimalID(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OwnerDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OwnerDto>;
        }));
    }

    protected processOwnerbyanimalID(response: HttpResponseBase): Observable<OwnerDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OwnerDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    addownerwithanimal(body: AddOwnerAndAnimalDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Owner/addownerwithanimal";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddownerwithanimal(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddownerwithanimal(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processAddownerwithanimal(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param ownerId (optional) 
     * @return OK
     */
    deleteownerwithanimal(ownerId: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Owner/deleteownerwithanimal?";
        if (ownerId === null)
            throw new Error("The parameter 'ownerId' cannot be null.");
        else if (ownerId !== undefined)
            url_ += "ownerId=" + encodeURIComponent("" + ownerId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteownerwithanimal(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteownerwithanimal(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDeleteownerwithanimal(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getAll7(): Observable<OwnerDtoIEnumerableApiResponse> {
        let url_ = this.baseUrl + "/api/Owner/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll7(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll7(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OwnerDtoIEnumerableApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OwnerDtoIEnumerableApiResponse>;
        }));
    }

    protected processGetAll7(response: HttpResponseBase): Observable<OwnerDtoIEnumerableApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OwnerDtoIEnumerableApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getById7(id: number | undefined): Observable<OwnerDtoApiResponse> {
        let url_ = this.baseUrl + "/api/Owner/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById7(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById7(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OwnerDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OwnerDtoApiResponse>;
        }));
    }

    protected processGetById7(response: HttpResponseBase): Observable<OwnerDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OwnerDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    add7(body: OwnerDto | undefined): Observable<OwnerDtoApiResponse> {
        let url_ = this.baseUrl + "/api/Owner/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd7(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd7(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OwnerDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OwnerDtoApiResponse>;
        }));
    }

    protected processAdd7(response: HttpResponseBase): Observable<OwnerDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OwnerDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update7(body: OwnerDto | undefined): Observable<OwnerDtoApiResponse> {
        let url_ = this.baseUrl + "/api/Owner/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate7(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate7(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<OwnerDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<OwnerDtoApiResponse>;
        }));
    }

    protected processUpdate7(response: HttpResponseBase): Observable<OwnerDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OwnerDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById7(id: number | undefined): Observable<BooleanApiResponse> {
        let url_ = this.baseUrl + "/api/Owner/DeleteById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteById7(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteById7(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanApiResponse>;
        }));
    }

    protected processDeleteById7(response: HttpResponseBase): Observable<BooleanApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    delete7(body: OwnerDto | undefined): Observable<BooleanApiResponse> {
        let url_ = this.baseUrl + "/api/Owner/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete7(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete7(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanApiResponse>;
        }));
    }

    protected processDelete7(response: HttpResponseBase): Observable<BooleanApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param staffId (optional) 
     * @return OK
     */
    getStaffNamebyId(staffId: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Staff/GetStaffNamebyId?";
        if (staffId === null)
            throw new Error("The parameter 'staffId' cannot be null.");
        else if (staffId !== undefined)
            url_ += "staffId=" + encodeURIComponent("" + staffId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetStaffNamebyId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStaffNamebyId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processGetStaffNamebyId(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getStaffNames(): Observable<GetStaffNamesdto[]> {
        let url_ = this.baseUrl + "/api/Staff/GetStaffNames";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetStaffNames(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetStaffNames(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetStaffNamesdto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetStaffNamesdto[]>;
        }));
    }

    protected processGetStaffNames(response: HttpResponseBase): Observable<GetStaffNamesdto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GetStaffNamesdto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    staffwithroles(): Observable<StaffWithRoleDTO[]> {
        let url_ = this.baseUrl + "/api/Staff/Staffwithroles";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processStaffwithroles(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processStaffwithroles(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<StaffWithRoleDTO[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<StaffWithRoleDTO[]>;
        }));
    }

    protected processStaffwithroles(response: HttpResponseBase): Observable<StaffWithRoleDTO[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(StaffWithRoleDTO.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param cvFile (optional) 
     * @param staffId (optional) 
     * @return OK
     */
    uploadcv(cvFile: FileParameter | undefined, staffId: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Staff/uploadcv";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (cvFile === null || cvFile === undefined)
            throw new Error("The parameter 'cvFile' cannot be null.");
        else
            content_.append("CvFile", cvFile.data, cvFile.fileName ? cvFile.fileName : "CvFile");
        if (staffId === null || staffId === undefined)
            throw new Error("The parameter 'staffId' cannot be null.");
        else
            content_.append("StaffId", staffId.toString());

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUploadcv(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadcv(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processUploadcv(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param staffId (optional) 
     * @return OK
     */
    downloadcv(staffId: number | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/Staff/downloadcv?";
        if (staffId === null)
            throw new Error("The parameter 'staffId' cannot be null.");
        else if (staffId !== undefined)
            url_ += "staffId=" + encodeURIComponent("" + staffId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDownloadcv(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDownloadcv(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processDownloadcv(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getAll8(): Observable<StaffDtoIEnumerableApiResponse> {
        let url_ = this.baseUrl + "/api/Staff/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll8(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll8(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<StaffDtoIEnumerableApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<StaffDtoIEnumerableApiResponse>;
        }));
    }

    protected processGetAll8(response: HttpResponseBase): Observable<StaffDtoIEnumerableApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StaffDtoIEnumerableApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getById8(id: number | undefined): Observable<StaffDtoApiResponse> {
        let url_ = this.baseUrl + "/api/Staff/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById8(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById8(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<StaffDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<StaffDtoApiResponse>;
        }));
    }

    protected processGetById8(response: HttpResponseBase): Observable<StaffDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StaffDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    add8(body: StaffDto | undefined): Observable<StaffDtoApiResponse> {
        let url_ = this.baseUrl + "/api/Staff/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd8(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd8(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<StaffDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<StaffDtoApiResponse>;
        }));
    }

    protected processAdd8(response: HttpResponseBase): Observable<StaffDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StaffDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update8(body: StaffDto | undefined): Observable<StaffDtoApiResponse> {
        let url_ = this.baseUrl + "/api/Staff/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate8(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate8(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<StaffDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<StaffDtoApiResponse>;
        }));
    }

    protected processUpdate8(response: HttpResponseBase): Observable<StaffDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StaffDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById8(id: number | undefined): Observable<BooleanApiResponse> {
        let url_ = this.baseUrl + "/api/Staff/DeleteById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteById8(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteById8(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanApiResponse>;
        }));
    }

    protected processDeleteById8(response: HttpResponseBase): Observable<BooleanApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    delete8(body: StaffDto | undefined): Observable<BooleanApiResponse> {
        let url_ = this.baseUrl + "/api/Staff/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete8(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete8(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanApiResponse>;
        }));
    }

    protected processDelete8(response: HttpResponseBase): Observable<BooleanApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getAll9(): Observable<StaffRoleDtoIEnumerableApiResponse> {
        let url_ = this.baseUrl + "/api/StaffRole/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll9(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll9(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<StaffRoleDtoIEnumerableApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<StaffRoleDtoIEnumerableApiResponse>;
        }));
    }

    protected processGetAll9(response: HttpResponseBase): Observable<StaffRoleDtoIEnumerableApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StaffRoleDtoIEnumerableApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getById9(id: number | undefined): Observable<StaffRoleDtoApiResponse> {
        let url_ = this.baseUrl + "/api/StaffRole/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById9(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById9(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<StaffRoleDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<StaffRoleDtoApiResponse>;
        }));
    }

    protected processGetById9(response: HttpResponseBase): Observable<StaffRoleDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StaffRoleDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    add9(body: StaffRoleDto | undefined): Observable<StaffRoleDtoApiResponse> {
        let url_ = this.baseUrl + "/api/StaffRole/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd9(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd9(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<StaffRoleDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<StaffRoleDtoApiResponse>;
        }));
    }

    protected processAdd9(response: HttpResponseBase): Observable<StaffRoleDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StaffRoleDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update9(body: StaffRoleDto | undefined): Observable<StaffRoleDtoApiResponse> {
        let url_ = this.baseUrl + "/api/StaffRole/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate9(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate9(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<StaffRoleDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<StaffRoleDtoApiResponse>;
        }));
    }

    protected processUpdate9(response: HttpResponseBase): Observable<StaffRoleDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = StaffRoleDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById9(id: number | undefined): Observable<BooleanApiResponse> {
        let url_ = this.baseUrl + "/api/StaffRole/DeleteById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteById9(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteById9(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanApiResponse>;
        }));
    }

    protected processDeleteById9(response: HttpResponseBase): Observable<BooleanApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    delete9(body: StaffRoleDto | undefined): Observable<BooleanApiResponse> {
        let url_ = this.baseUrl + "/api/StaffRole/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete9(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete9(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanApiResponse>;
        }));
    }

    protected processDelete9(response: HttpResponseBase): Observable<BooleanApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    signup(body: UserDto | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/UserContoller/signup";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSignup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSignup(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<void>;
                }
            } else
                return _observableThrow(response_) as any as Observable<void>;
        }));
    }

    protected processSignup(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return _observableOf(null as any);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getAll10(): Observable<UserDtoIEnumerableApiResponse> {
        let url_ = this.baseUrl + "/api/UserContoller/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll10(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll10(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDtoIEnumerableApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDtoIEnumerableApiResponse>;
        }));
    }

    protected processGetAll10(response: HttpResponseBase): Observable<UserDtoIEnumerableApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDtoIEnumerableApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getById10(id: number | undefined): Observable<UserDtoApiResponse> {
        let url_ = this.baseUrl + "/api/UserContoller/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById10(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById10(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDtoApiResponse>;
        }));
    }

    protected processGetById10(response: HttpResponseBase): Observable<UserDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    add10(body: UserDto | undefined): Observable<UserDtoApiResponse> {
        let url_ = this.baseUrl + "/api/UserContoller/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd10(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd10(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDtoApiResponse>;
        }));
    }

    protected processAdd10(response: HttpResponseBase): Observable<UserDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update10(body: UserDto | undefined): Observable<UserDtoApiResponse> {
        let url_ = this.baseUrl + "/api/UserContoller/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate10(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate10(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<UserDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<UserDtoApiResponse>;
        }));
    }

    protected processUpdate10(response: HttpResponseBase): Observable<UserDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById10(id: number | undefined): Observable<BooleanApiResponse> {
        let url_ = this.baseUrl + "/api/UserContoller/DeleteById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteById10(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteById10(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanApiResponse>;
        }));
    }

    protected processDeleteById10(response: HttpResponseBase): Observable<BooleanApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    delete10(body: UserDto | undefined): Observable<BooleanApiResponse> {
        let url_ = this.baseUrl + "/api/UserContoller/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete10(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete10(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanApiResponse>;
        }));
    }

    protected processDelete10(response: HttpResponseBase): Observable<BooleanApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param animalId (optional) 
     * @return OK
     */
    getvaccinationbyanimalId(animalId: number | undefined): Observable<VaccinationDto[]> {
        let url_ = this.baseUrl + "/api/Vaccination/GetvaccinationbyanimalId?";
        if (animalId === null)
            throw new Error("The parameter 'animalId' cannot be null.");
        else if (animalId !== undefined)
            url_ += "animalId=" + encodeURIComponent("" + animalId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetvaccinationbyanimalId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetvaccinationbyanimalId(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<VaccinationDto[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<VaccinationDto[]>;
        }));
    }

    protected processGetvaccinationbyanimalId(response: HttpResponseBase): Observable<VaccinationDto[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(VaccinationDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @return OK
     */
    getAll11(): Observable<VaccinationDtoIEnumerableApiResponse> {
        let url_ = this.baseUrl + "/api/Vaccination/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll11(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll11(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<VaccinationDtoIEnumerableApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<VaccinationDtoIEnumerableApiResponse>;
        }));
    }

    protected processGetAll11(response: HttpResponseBase): Observable<VaccinationDtoIEnumerableApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VaccinationDtoIEnumerableApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    getById11(id: number | undefined): Observable<VaccinationDtoApiResponse> {
        let url_ = this.baseUrl + "/api/Vaccination/GetById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById11(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById11(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<VaccinationDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<VaccinationDtoApiResponse>;
        }));
    }

    protected processGetById11(response: HttpResponseBase): Observable<VaccinationDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VaccinationDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    add11(body: VaccinationDto | undefined): Observable<VaccinationDtoApiResponse> {
        let url_ = this.baseUrl + "/api/Vaccination/Add";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAdd11(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAdd11(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<VaccinationDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<VaccinationDtoApiResponse>;
        }));
    }

    protected processAdd11(response: HttpResponseBase): Observable<VaccinationDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VaccinationDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    update11(body: VaccinationDto | undefined): Observable<VaccinationDtoApiResponse> {
        let url_ = this.baseUrl + "/api/Vaccination/Update";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate11(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate11(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<VaccinationDtoApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<VaccinationDtoApiResponse>;
        }));
    }

    protected processUpdate11(response: HttpResponseBase): Observable<VaccinationDtoApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = VaccinationDtoApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param id (optional) 
     * @return OK
     */
    deleteById11(id: number | undefined): Observable<BooleanApiResponse> {
        let url_ = this.baseUrl + "/api/Vaccination/DeleteById?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteById11(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteById11(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanApiResponse>;
        }));
    }

    protected processDeleteById11(response: HttpResponseBase): Observable<BooleanApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return OK
     */
    delete11(body: VaccinationDto | undefined): Observable<BooleanApiResponse> {
        let url_ = this.baseUrl + "/api/Vaccination/Delete";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete11(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete11(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BooleanApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BooleanApiResponse>;
        }));
    }

    protected processDelete11(response: HttpResponseBase): Observable<BooleanApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BooleanApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class AddOwnerAndAnimalDto implements IAddOwnerAndAnimalDto {
    ownerId?: number;
    fullName?: string | null;
    address?: string | null;
    phone?: string | null;
    ownerBirthDate?: Date;
    animals?: AnimalDto;

    constructor(data?: IAddOwnerAndAnimalDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ownerId = _data["ownerId"] !== undefined ? _data["ownerId"] : <any>null;
            this.fullName = _data["fullName"] !== undefined ? _data["fullName"] : <any>null;
            this.address = _data["address"] !== undefined ? _data["address"] : <any>null;
            this.phone = _data["phone"] !== undefined ? _data["phone"] : <any>null;
            this.ownerBirthDate = _data["ownerBirthDate"] ? new Date(_data["ownerBirthDate"].toString()) : <any>null;
            this.animals = _data["animals"] ? AnimalDto.fromJS(_data["animals"]) : <any>null;
        }
    }

    static fromJS(data: any): AddOwnerAndAnimalDto {
        data = typeof data === 'object' ? data : {};
        let result = new AddOwnerAndAnimalDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ownerId"] = this.ownerId !== undefined ? this.ownerId : <any>null;
        data["fullName"] = this.fullName !== undefined ? this.fullName : <any>null;
        data["address"] = this.address !== undefined ? this.address : <any>null;
        data["phone"] = this.phone !== undefined ? this.phone : <any>null;
        data["ownerBirthDate"] = this.ownerBirthDate ? this.ownerBirthDate.toISOString() : <any>null;
        data["animals"] = this.animals ? this.animals.toJSON() : <any>null;
        return data;
    }
}

export interface IAddOwnerAndAnimalDto {
    ownerId?: number;
    fullName?: string | null;
    address?: string | null;
    phone?: string | null;
    ownerBirthDate?: Date;
    animals?: AnimalDto;
}

export class Animal implements IAnimal {
    animalId?: number;
    ownerId?: number;
    animalTypeId?: number;
    animalName?: string | null;
    species?: string | null;
    breed?: string | null;
    gender?: string | null;
    animalBirthDate?: Date;
    weight?: number;
    animalType?: AnimalType;
    appointments?: Appointment[] | null;
    medicalRecords?: MedicalRecord[] | null;
    owner?: Owner;
    vaccinations?: Vaccination[] | null;

    constructor(data?: IAnimal) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.animalId = _data["animalId"] !== undefined ? _data["animalId"] : <any>null;
            this.ownerId = _data["ownerId"] !== undefined ? _data["ownerId"] : <any>null;
            this.animalTypeId = _data["animalTypeId"] !== undefined ? _data["animalTypeId"] : <any>null;
            this.animalName = _data["animalName"] !== undefined ? _data["animalName"] : <any>null;
            this.species = _data["species"] !== undefined ? _data["species"] : <any>null;
            this.breed = _data["breed"] !== undefined ? _data["breed"] : <any>null;
            this.gender = _data["gender"] !== undefined ? _data["gender"] : <any>null;
            this.animalBirthDate = _data["animalBirthDate"] ? new Date(_data["animalBirthDate"].toString()) : <any>null;
            this.weight = _data["weight"] !== undefined ? _data["weight"] : <any>null;
            this.animalType = _data["animalType"] ? AnimalType.fromJS(_data["animalType"]) : <any>null;
            if (Array.isArray(_data["appointments"])) {
                this.appointments = [] as any;
                for (let item of _data["appointments"])
                    this.appointments!.push(Appointment.fromJS(item));
            }
            else {
                this.appointments = <any>null;
            }
            if (Array.isArray(_data["medicalRecords"])) {
                this.medicalRecords = [] as any;
                for (let item of _data["medicalRecords"])
                    this.medicalRecords!.push(MedicalRecord.fromJS(item));
            }
            else {
                this.medicalRecords = <any>null;
            }
            this.owner = _data["owner"] ? Owner.fromJS(_data["owner"]) : <any>null;
            if (Array.isArray(_data["vaccinations"])) {
                this.vaccinations = [] as any;
                for (let item of _data["vaccinations"])
                    this.vaccinations!.push(Vaccination.fromJS(item));
            }
            else {
                this.vaccinations = <any>null;
            }
        }
    }

    static fromJS(data: any): Animal {
        data = typeof data === 'object' ? data : {};
        let result = new Animal();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["animalId"] = this.animalId !== undefined ? this.animalId : <any>null;
        data["ownerId"] = this.ownerId !== undefined ? this.ownerId : <any>null;
        data["animalTypeId"] = this.animalTypeId !== undefined ? this.animalTypeId : <any>null;
        data["animalName"] = this.animalName !== undefined ? this.animalName : <any>null;
        data["species"] = this.species !== undefined ? this.species : <any>null;
        data["breed"] = this.breed !== undefined ? this.breed : <any>null;
        data["gender"] = this.gender !== undefined ? this.gender : <any>null;
        data["animalBirthDate"] = this.animalBirthDate ? this.animalBirthDate.toISOString() : <any>null;
        data["weight"] = this.weight !== undefined ? this.weight : <any>null;
        data["animalType"] = this.animalType ? this.animalType.toJSON() : <any>null;
        if (Array.isArray(this.appointments)) {
            data["appointments"] = [];
            for (let item of this.appointments)
                data["appointments"].push(item.toJSON());
        }
        if (Array.isArray(this.medicalRecords)) {
            data["medicalRecords"] = [];
            for (let item of this.medicalRecords)
                data["medicalRecords"].push(item.toJSON());
        }
        data["owner"] = this.owner ? this.owner.toJSON() : <any>null;
        if (Array.isArray(this.vaccinations)) {
            data["vaccinations"] = [];
            for (let item of this.vaccinations)
                data["vaccinations"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAnimal {
    animalId?: number;
    ownerId?: number;
    animalTypeId?: number;
    animalName?: string | null;
    species?: string | null;
    breed?: string | null;
    gender?: string | null;
    animalBirthDate?: Date;
    weight?: number;
    animalType?: AnimalType;
    appointments?: Appointment[] | null;
    medicalRecords?: MedicalRecord[] | null;
    owner?: Owner;
    vaccinations?: Vaccination[] | null;
}

export class AnimalDto implements IAnimalDto {
    animalId?: number;
    ownerId?: number;
    animalTypeId?: number;
    animalName?: string | null;
    species?: string | null;
    breed?: string | null;
    gender?: string | null;
    animalBirthDate?: Date;
    weight?: number;

    constructor(data?: IAnimalDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.animalId = _data["animalId"] !== undefined ? _data["animalId"] : <any>null;
            this.ownerId = _data["ownerId"] !== undefined ? _data["ownerId"] : <any>null;
            this.animalTypeId = _data["animalTypeId"] !== undefined ? _data["animalTypeId"] : <any>null;
            this.animalName = _data["animalName"] !== undefined ? _data["animalName"] : <any>null;
            this.species = _data["species"] !== undefined ? _data["species"] : <any>null;
            this.breed = _data["breed"] !== undefined ? _data["breed"] : <any>null;
            this.gender = _data["gender"] !== undefined ? _data["gender"] : <any>null;
            this.animalBirthDate = _data["animalBirthDate"] ? new Date(_data["animalBirthDate"].toString()) : <any>null;
            this.weight = _data["weight"] !== undefined ? _data["weight"] : <any>null;
        }
    }

    static fromJS(data: any): AnimalDto {
        data = typeof data === 'object' ? data : {};
        let result = new AnimalDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["animalId"] = this.animalId !== undefined ? this.animalId : <any>null;
        data["ownerId"] = this.ownerId !== undefined ? this.ownerId : <any>null;
        data["animalTypeId"] = this.animalTypeId !== undefined ? this.animalTypeId : <any>null;
        data["animalName"] = this.animalName !== undefined ? this.animalName : <any>null;
        data["species"] = this.species !== undefined ? this.species : <any>null;
        data["breed"] = this.breed !== undefined ? this.breed : <any>null;
        data["gender"] = this.gender !== undefined ? this.gender : <any>null;
        data["animalBirthDate"] = this.animalBirthDate ? this.animalBirthDate.toISOString() : <any>null;
        data["weight"] = this.weight !== undefined ? this.weight : <any>null;
        return data;
    }
}

export interface IAnimalDto {
    animalId?: number;
    ownerId?: number;
    animalTypeId?: number;
    animalName?: string | null;
    species?: string | null;
    breed?: string | null;
    gender?: string | null;
    animalBirthDate?: Date;
    weight?: number;
}

export class AnimalDtoApiResponse implements IAnimalDtoApiResponse {
    success?: boolean;
    data?: AnimalDto;
    message?: string | null;
    errorMessage?: string | null;

    constructor(data?: IAnimalDtoApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"] !== undefined ? _data["success"] : <any>null;
            this.data = _data["data"] ? AnimalDto.fromJS(_data["data"]) : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.errorMessage = _data["errorMessage"] !== undefined ? _data["errorMessage"] : <any>null;
        }
    }

    static fromJS(data: any): AnimalDtoApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AnimalDtoApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["errorMessage"] = this.errorMessage !== undefined ? this.errorMessage : <any>null;
        return data;
    }
}

export interface IAnimalDtoApiResponse {
    success?: boolean;
    data?: AnimalDto;
    message?: string | null;
    errorMessage?: string | null;
}

export class AnimalDtoIEnumerableApiResponse implements IAnimalDtoIEnumerableApiResponse {
    success?: boolean;
    data?: AnimalDto[] | null;
    message?: string | null;
    errorMessage?: string | null;

    constructor(data?: IAnimalDtoIEnumerableApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"] !== undefined ? _data["success"] : <any>null;
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(AnimalDto.fromJS(item));
            }
            else {
                this.data = <any>null;
            }
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.errorMessage = _data["errorMessage"] !== undefined ? _data["errorMessage"] : <any>null;
        }
    }

    static fromJS(data: any): AnimalDtoIEnumerableApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AnimalDtoIEnumerableApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["errorMessage"] = this.errorMessage !== undefined ? this.errorMessage : <any>null;
        return data;
    }
}

export interface IAnimalDtoIEnumerableApiResponse {
    success?: boolean;
    data?: AnimalDto[] | null;
    message?: string | null;
    errorMessage?: string | null;
}

export class AnimalType implements IAnimalType {
    animalTypeId?: number;
    typeName?: string | null;
    animals?: Animal[] | null;

    constructor(data?: IAnimalType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.animalTypeId = _data["animalTypeId"] !== undefined ? _data["animalTypeId"] : <any>null;
            this.typeName = _data["typeName"] !== undefined ? _data["typeName"] : <any>null;
            if (Array.isArray(_data["animals"])) {
                this.animals = [] as any;
                for (let item of _data["animals"])
                    this.animals!.push(Animal.fromJS(item));
            }
            else {
                this.animals = <any>null;
            }
        }
    }

    static fromJS(data: any): AnimalType {
        data = typeof data === 'object' ? data : {};
        let result = new AnimalType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["animalTypeId"] = this.animalTypeId !== undefined ? this.animalTypeId : <any>null;
        data["typeName"] = this.typeName !== undefined ? this.typeName : <any>null;
        if (Array.isArray(this.animals)) {
            data["animals"] = [];
            for (let item of this.animals)
                data["animals"].push(item.toJSON());
        }
        return data;
    }
}

export interface IAnimalType {
    animalTypeId?: number;
    typeName?: string | null;
    animals?: Animal[] | null;
}

export class AnimalTypeDto implements IAnimalTypeDto {
    animalTypeId?: number;
    typeName?: string | null;

    constructor(data?: IAnimalTypeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.animalTypeId = _data["animalTypeId"] !== undefined ? _data["animalTypeId"] : <any>null;
            this.typeName = _data["typeName"] !== undefined ? _data["typeName"] : <any>null;
        }
    }

    static fromJS(data: any): AnimalTypeDto {
        data = typeof data === 'object' ? data : {};
        let result = new AnimalTypeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["animalTypeId"] = this.animalTypeId !== undefined ? this.animalTypeId : <any>null;
        data["typeName"] = this.typeName !== undefined ? this.typeName : <any>null;
        return data;
    }
}

export interface IAnimalTypeDto {
    animalTypeId?: number;
    typeName?: string | null;
}

export class AnimalTypeDtoApiResponse implements IAnimalTypeDtoApiResponse {
    success?: boolean;
    data?: AnimalTypeDto;
    message?: string | null;
    errorMessage?: string | null;

    constructor(data?: IAnimalTypeDtoApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"] !== undefined ? _data["success"] : <any>null;
            this.data = _data["data"] ? AnimalTypeDto.fromJS(_data["data"]) : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.errorMessage = _data["errorMessage"] !== undefined ? _data["errorMessage"] : <any>null;
        }
    }

    static fromJS(data: any): AnimalTypeDtoApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AnimalTypeDtoApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["errorMessage"] = this.errorMessage !== undefined ? this.errorMessage : <any>null;
        return data;
    }
}

export interface IAnimalTypeDtoApiResponse {
    success?: boolean;
    data?: AnimalTypeDto;
    message?: string | null;
    errorMessage?: string | null;
}

export class AnimalTypeDtoIEnumerableApiResponse implements IAnimalTypeDtoIEnumerableApiResponse {
    success?: boolean;
    data?: AnimalTypeDto[] | null;
    message?: string | null;
    errorMessage?: string | null;

    constructor(data?: IAnimalTypeDtoIEnumerableApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"] !== undefined ? _data["success"] : <any>null;
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(AnimalTypeDto.fromJS(item));
            }
            else {
                this.data = <any>null;
            }
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.errorMessage = _data["errorMessage"] !== undefined ? _data["errorMessage"] : <any>null;
        }
    }

    static fromJS(data: any): AnimalTypeDtoIEnumerableApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AnimalTypeDtoIEnumerableApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["errorMessage"] = this.errorMessage !== undefined ? this.errorMessage : <any>null;
        return data;
    }
}

export interface IAnimalTypeDtoIEnumerableApiResponse {
    success?: boolean;
    data?: AnimalTypeDto[] | null;
    message?: string | null;
    errorMessage?: string | null;
}

export class Appointment implements IAppointment {
    appointmentId?: number;
    animalId?: number;
    staffId?: number;
    appointmentDate?: Date;
    status?: string | null;
    createdAt?: Date;
    animal?: Animal;
    staff?: Staff;

    constructor(data?: IAppointment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.appointmentId = _data["appointmentId"] !== undefined ? _data["appointmentId"] : <any>null;
            this.animalId = _data["animalId"] !== undefined ? _data["animalId"] : <any>null;
            this.staffId = _data["staffId"] !== undefined ? _data["staffId"] : <any>null;
            this.appointmentDate = _data["appointmentDate"] ? new Date(_data["appointmentDate"].toString()) : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>null;
            this.animal = _data["animal"] ? Animal.fromJS(_data["animal"]) : <any>null;
            this.staff = _data["staff"] ? Staff.fromJS(_data["staff"]) : <any>null;
        }
    }

    static fromJS(data: any): Appointment {
        data = typeof data === 'object' ? data : {};
        let result = new Appointment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appointmentId"] = this.appointmentId !== undefined ? this.appointmentId : <any>null;
        data["animalId"] = this.animalId !== undefined ? this.animalId : <any>null;
        data["staffId"] = this.staffId !== undefined ? this.staffId : <any>null;
        data["appointmentDate"] = this.appointmentDate ? this.appointmentDate.toISOString() : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
        data["animal"] = this.animal ? this.animal.toJSON() : <any>null;
        data["staff"] = this.staff ? this.staff.toJSON() : <any>null;
        return data;
    }
}

export interface IAppointment {
    appointmentId?: number;
    animalId?: number;
    staffId?: number;
    appointmentDate?: Date;
    status?: string | null;
    createdAt?: Date;
    animal?: Animal;
    staff?: Staff;
}

export class AppointmentDto implements IAppointmentDto {
    appointmentId?: number;
    animalId?: number;
    staffId?: number;
    appointmentDate?: Date;
    status?: string | null;
    createdAt?: Date;

    constructor(data?: IAppointmentDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.appointmentId = _data["appointmentId"] !== undefined ? _data["appointmentId"] : <any>null;
            this.animalId = _data["animalId"] !== undefined ? _data["animalId"] : <any>null;
            this.staffId = _data["staffId"] !== undefined ? _data["staffId"] : <any>null;
            this.appointmentDate = _data["appointmentDate"] ? new Date(_data["appointmentDate"].toString()) : <any>null;
            this.status = _data["status"] !== undefined ? _data["status"] : <any>null;
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): AppointmentDto {
        data = typeof data === 'object' ? data : {};
        let result = new AppointmentDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appointmentId"] = this.appointmentId !== undefined ? this.appointmentId : <any>null;
        data["animalId"] = this.animalId !== undefined ? this.animalId : <any>null;
        data["staffId"] = this.staffId !== undefined ? this.staffId : <any>null;
        data["appointmentDate"] = this.appointmentDate ? this.appointmentDate.toISOString() : <any>null;
        data["status"] = this.status !== undefined ? this.status : <any>null;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
        return data;
    }
}

export interface IAppointmentDto {
    appointmentId?: number;
    animalId?: number;
    staffId?: number;
    appointmentDate?: Date;
    status?: string | null;
    createdAt?: Date;
}

export class AppointmentDtoApiResponse implements IAppointmentDtoApiResponse {
    success?: boolean;
    data?: AppointmentDto;
    message?: string | null;
    errorMessage?: string | null;

    constructor(data?: IAppointmentDtoApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"] !== undefined ? _data["success"] : <any>null;
            this.data = _data["data"] ? AppointmentDto.fromJS(_data["data"]) : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.errorMessage = _data["errorMessage"] !== undefined ? _data["errorMessage"] : <any>null;
        }
    }

    static fromJS(data: any): AppointmentDtoApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AppointmentDtoApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["errorMessage"] = this.errorMessage !== undefined ? this.errorMessage : <any>null;
        return data;
    }
}

export interface IAppointmentDtoApiResponse {
    success?: boolean;
    data?: AppointmentDto;
    message?: string | null;
    errorMessage?: string | null;
}

export class AppointmentDtoIEnumerableApiResponse implements IAppointmentDtoIEnumerableApiResponse {
    success?: boolean;
    data?: AppointmentDto[] | null;
    message?: string | null;
    errorMessage?: string | null;

    constructor(data?: IAppointmentDtoIEnumerableApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"] !== undefined ? _data["success"] : <any>null;
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(AppointmentDto.fromJS(item));
            }
            else {
                this.data = <any>null;
            }
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.errorMessage = _data["errorMessage"] !== undefined ? _data["errorMessage"] : <any>null;
        }
    }

    static fromJS(data: any): AppointmentDtoIEnumerableApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AppointmentDtoIEnumerableApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["errorMessage"] = this.errorMessage !== undefined ? this.errorMessage : <any>null;
        return data;
    }
}

export interface IAppointmentDtoIEnumerableApiResponse {
    success?: boolean;
    data?: AppointmentDto[] | null;
    message?: string | null;
    errorMessage?: string | null;
}

export class AuthResponseDto implements IAuthResponseDto {
    token?: string | null;
    username?: string | null;
    userId?: number;
    password?: string | null;
    email?: string | null;
    userRoleId?: number;

    constructor(data?: IAuthResponseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"] !== undefined ? _data["token"] : <any>null;
            this.username = _data["username"] !== undefined ? _data["username"] : <any>null;
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.userRoleId = _data["userRoleId"] !== undefined ? _data["userRoleId"] : <any>null;
        }
    }

    static fromJS(data: any): AuthResponseDto {
        data = typeof data === 'object' ? data : {};
        let result = new AuthResponseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token !== undefined ? this.token : <any>null;
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["userRoleId"] = this.userRoleId !== undefined ? this.userRoleId : <any>null;
        return data;
    }
}

export interface IAuthResponseDto {
    token?: string | null;
    username?: string | null;
    userId?: number;
    password?: string | null;
    email?: string | null;
    userRoleId?: number;
}

export class BooleanApiResponse implements IBooleanApiResponse {
    success?: boolean;
    data?: boolean;
    message?: string | null;
    errorMessage?: string | null;

    constructor(data?: IBooleanApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"] !== undefined ? _data["success"] : <any>null;
            this.data = _data["data"] !== undefined ? _data["data"] : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.errorMessage = _data["errorMessage"] !== undefined ? _data["errorMessage"] : <any>null;
        }
    }

    static fromJS(data: any): BooleanApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BooleanApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        data["data"] = this.data !== undefined ? this.data : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["errorMessage"] = this.errorMessage !== undefined ? this.errorMessage : <any>null;
        return data;
    }
}

export interface IBooleanApiResponse {
    success?: boolean;
    data?: boolean;
    message?: string | null;
    errorMessage?: string | null;
}

export class GetAnimalbyOwnerIDdto implements IGetAnimalbyOwnerIDdto {
    ownerId?: number;
    animals?: AnimalDto[] | null;

    constructor(data?: IGetAnimalbyOwnerIDdto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ownerId = _data["ownerId"] !== undefined ? _data["ownerId"] : <any>null;
            if (Array.isArray(_data["animals"])) {
                this.animals = [] as any;
                for (let item of _data["animals"])
                    this.animals!.push(AnimalDto.fromJS(item));
            }
            else {
                this.animals = <any>null;
            }
        }
    }

    static fromJS(data: any): GetAnimalbyOwnerIDdto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAnimalbyOwnerIDdto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ownerId"] = this.ownerId !== undefined ? this.ownerId : <any>null;
        if (Array.isArray(this.animals)) {
            data["animals"] = [];
            for (let item of this.animals)
                data["animals"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetAnimalbyOwnerIDdto {
    ownerId?: number;
    animals?: AnimalDto[] | null;
}

export class GetStaffNamesdto implements IGetStaffNamesdto {
    staffId?: number;
    fullName?: string | null;

    constructor(data?: IGetStaffNamesdto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.staffId = _data["staffId"] !== undefined ? _data["staffId"] : <any>null;
            this.fullName = _data["fullName"] !== undefined ? _data["fullName"] : <any>null;
        }
    }

    static fromJS(data: any): GetStaffNamesdto {
        data = typeof data === 'object' ? data : {};
        let result = new GetStaffNamesdto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["staffId"] = this.staffId !== undefined ? this.staffId : <any>null;
        data["fullName"] = this.fullName !== undefined ? this.fullName : <any>null;
        return data;
    }
}

export interface IGetStaffNamesdto {
    staffId?: number;
    fullName?: string | null;
}

export class InventoryDto implements IInventoryDto {
    itemId?: number;
    itemName?: string | null;
    quantity?: number;
    lastRestocked?: Date;
    unitPrice?: number;

    constructor(data?: IInventoryDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.itemId = _data["itemId"] !== undefined ? _data["itemId"] : <any>null;
            this.itemName = _data["itemName"] !== undefined ? _data["itemName"] : <any>null;
            this.quantity = _data["quantity"] !== undefined ? _data["quantity"] : <any>null;
            this.lastRestocked = _data["lastRestocked"] ? new Date(_data["lastRestocked"].toString()) : <any>null;
            this.unitPrice = _data["unitPrice"] !== undefined ? _data["unitPrice"] : <any>null;
        }
    }

    static fromJS(data: any): InventoryDto {
        data = typeof data === 'object' ? data : {};
        let result = new InventoryDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemId"] = this.itemId !== undefined ? this.itemId : <any>null;
        data["itemName"] = this.itemName !== undefined ? this.itemName : <any>null;
        data["quantity"] = this.quantity !== undefined ? this.quantity : <any>null;
        data["lastRestocked"] = this.lastRestocked ? this.lastRestocked.toISOString() : <any>null;
        data["unitPrice"] = this.unitPrice !== undefined ? this.unitPrice : <any>null;
        return data;
    }
}

export interface IInventoryDto {
    itemId?: number;
    itemName?: string | null;
    quantity?: number;
    lastRestocked?: Date;
    unitPrice?: number;
}

export class InventoryDtoApiResponse implements IInventoryDtoApiResponse {
    success?: boolean;
    data?: InventoryDto;
    message?: string | null;
    errorMessage?: string | null;

    constructor(data?: IInventoryDtoApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"] !== undefined ? _data["success"] : <any>null;
            this.data = _data["data"] ? InventoryDto.fromJS(_data["data"]) : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.errorMessage = _data["errorMessage"] !== undefined ? _data["errorMessage"] : <any>null;
        }
    }

    static fromJS(data: any): InventoryDtoApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new InventoryDtoApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["errorMessage"] = this.errorMessage !== undefined ? this.errorMessage : <any>null;
        return data;
    }
}

export interface IInventoryDtoApiResponse {
    success?: boolean;
    data?: InventoryDto;
    message?: string | null;
    errorMessage?: string | null;
}

export class InventoryDtoIEnumerableApiResponse implements IInventoryDtoIEnumerableApiResponse {
    success?: boolean;
    data?: InventoryDto[] | null;
    message?: string | null;
    errorMessage?: string | null;

    constructor(data?: IInventoryDtoIEnumerableApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"] !== undefined ? _data["success"] : <any>null;
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(InventoryDto.fromJS(item));
            }
            else {
                this.data = <any>null;
            }
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.errorMessage = _data["errorMessage"] !== undefined ? _data["errorMessage"] : <any>null;
        }
    }

    static fromJS(data: any): InventoryDtoIEnumerableApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new InventoryDtoIEnumerableApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["errorMessage"] = this.errorMessage !== undefined ? this.errorMessage : <any>null;
        return data;
    }
}

export interface IInventoryDtoIEnumerableApiResponse {
    success?: boolean;
    data?: InventoryDto[] | null;
    message?: string | null;
    errorMessage?: string | null;
}

export class Invoice implements IInvoice {
    invoiceId?: number;
    ownerId?: number;
    totalAmount?: number;
    paymentStatus?: string | null;
    paymentDate?: Date;
    owner?: Owner;

    constructor(data?: IInvoice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.invoiceId = _data["invoiceId"] !== undefined ? _data["invoiceId"] : <any>null;
            this.ownerId = _data["ownerId"] !== undefined ? _data["ownerId"] : <any>null;
            this.totalAmount = _data["totalAmount"] !== undefined ? _data["totalAmount"] : <any>null;
            this.paymentStatus = _data["paymentStatus"] !== undefined ? _data["paymentStatus"] : <any>null;
            this.paymentDate = _data["paymentDate"] ? new Date(_data["paymentDate"].toString()) : <any>null;
            this.owner = _data["owner"] ? Owner.fromJS(_data["owner"]) : <any>null;
        }
    }

    static fromJS(data: any): Invoice {
        data = typeof data === 'object' ? data : {};
        let result = new Invoice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["invoiceId"] = this.invoiceId !== undefined ? this.invoiceId : <any>null;
        data["ownerId"] = this.ownerId !== undefined ? this.ownerId : <any>null;
        data["totalAmount"] = this.totalAmount !== undefined ? this.totalAmount : <any>null;
        data["paymentStatus"] = this.paymentStatus !== undefined ? this.paymentStatus : <any>null;
        data["paymentDate"] = this.paymentDate ? this.paymentDate.toISOString() : <any>null;
        data["owner"] = this.owner ? this.owner.toJSON() : <any>null;
        return data;
    }
}

export interface IInvoice {
    invoiceId?: number;
    ownerId?: number;
    totalAmount?: number;
    paymentStatus?: string | null;
    paymentDate?: Date;
    owner?: Owner;
}

export class InvoiceDto implements IInvoiceDto {
    invoiceId?: number;
    ownerId?: number;
    totalAmount?: number;
    paymentStatus?: string | null;
    paymentDate?: Date;
    owner?: Owner;

    constructor(data?: IInvoiceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.invoiceId = _data["invoiceId"] !== undefined ? _data["invoiceId"] : <any>null;
            this.ownerId = _data["ownerId"] !== undefined ? _data["ownerId"] : <any>null;
            this.totalAmount = _data["totalAmount"] !== undefined ? _data["totalAmount"] : <any>null;
            this.paymentStatus = _data["paymentStatus"] !== undefined ? _data["paymentStatus"] : <any>null;
            this.paymentDate = _data["paymentDate"] ? new Date(_data["paymentDate"].toString()) : <any>null;
            this.owner = _data["owner"] ? Owner.fromJS(_data["owner"]) : <any>null;
        }
    }

    static fromJS(data: any): InvoiceDto {
        data = typeof data === 'object' ? data : {};
        let result = new InvoiceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["invoiceId"] = this.invoiceId !== undefined ? this.invoiceId : <any>null;
        data["ownerId"] = this.ownerId !== undefined ? this.ownerId : <any>null;
        data["totalAmount"] = this.totalAmount !== undefined ? this.totalAmount : <any>null;
        data["paymentStatus"] = this.paymentStatus !== undefined ? this.paymentStatus : <any>null;
        data["paymentDate"] = this.paymentDate ? this.paymentDate.toISOString() : <any>null;
        data["owner"] = this.owner ? this.owner.toJSON() : <any>null;
        return data;
    }
}

export interface IInvoiceDto {
    invoiceId?: number;
    ownerId?: number;
    totalAmount?: number;
    paymentStatus?: string | null;
    paymentDate?: Date;
    owner?: Owner;
}

export class InvoiceDtoApiResponse implements IInvoiceDtoApiResponse {
    success?: boolean;
    data?: InvoiceDto;
    message?: string | null;
    errorMessage?: string | null;

    constructor(data?: IInvoiceDtoApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"] !== undefined ? _data["success"] : <any>null;
            this.data = _data["data"] ? InvoiceDto.fromJS(_data["data"]) : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.errorMessage = _data["errorMessage"] !== undefined ? _data["errorMessage"] : <any>null;
        }
    }

    static fromJS(data: any): InvoiceDtoApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new InvoiceDtoApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["errorMessage"] = this.errorMessage !== undefined ? this.errorMessage : <any>null;
        return data;
    }
}

export interface IInvoiceDtoApiResponse {
    success?: boolean;
    data?: InvoiceDto;
    message?: string | null;
    errorMessage?: string | null;
}

export class InvoiceDtoIEnumerableApiResponse implements IInvoiceDtoIEnumerableApiResponse {
    success?: boolean;
    data?: InvoiceDto[] | null;
    message?: string | null;
    errorMessage?: string | null;

    constructor(data?: IInvoiceDtoIEnumerableApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"] !== undefined ? _data["success"] : <any>null;
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(InvoiceDto.fromJS(item));
            }
            else {
                this.data = <any>null;
            }
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.errorMessage = _data["errorMessage"] !== undefined ? _data["errorMessage"] : <any>null;
        }
    }

    static fromJS(data: any): InvoiceDtoIEnumerableApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new InvoiceDtoIEnumerableApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["errorMessage"] = this.errorMessage !== undefined ? this.errorMessage : <any>null;
        return data;
    }
}

export interface IInvoiceDtoIEnumerableApiResponse {
    success?: boolean;
    data?: InvoiceDto[] | null;
    message?: string | null;
    errorMessage?: string | null;
}

export class LoginRequestDto implements ILoginRequestDto {
    username?: string | null;
    password?: string | null;

    constructor(data?: ILoginRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"] !== undefined ? _data["username"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
        }
    }

    static fromJS(data: any): LoginRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        return data;
    }
}

export interface ILoginRequestDto {
    username?: string | null;
    password?: string | null;
}

export class MedicalRecord implements IMedicalRecord {
    medicalRecordId?: number;
    animalId?: number;
    staffId?: number;
    diagnosis?: string | null;
    treatment?: string | null;
    surgeryDetails?: string | null;
    prescribedMedication?: string | null;
    createdAt?: Date;
    animal?: Animal;
    staff?: Staff;

    constructor(data?: IMedicalRecord) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.medicalRecordId = _data["medicalRecordId"] !== undefined ? _data["medicalRecordId"] : <any>null;
            this.animalId = _data["animalId"] !== undefined ? _data["animalId"] : <any>null;
            this.staffId = _data["staffId"] !== undefined ? _data["staffId"] : <any>null;
            this.diagnosis = _data["diagnosis"] !== undefined ? _data["diagnosis"] : <any>null;
            this.treatment = _data["treatment"] !== undefined ? _data["treatment"] : <any>null;
            this.surgeryDetails = _data["surgeryDetails"] !== undefined ? _data["surgeryDetails"] : <any>null;
            this.prescribedMedication = _data["prescribedMedication"] !== undefined ? _data["prescribedMedication"] : <any>null;
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>null;
            this.animal = _data["animal"] ? Animal.fromJS(_data["animal"]) : <any>null;
            this.staff = _data["staff"] ? Staff.fromJS(_data["staff"]) : <any>null;
        }
    }

    static fromJS(data: any): MedicalRecord {
        data = typeof data === 'object' ? data : {};
        let result = new MedicalRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["medicalRecordId"] = this.medicalRecordId !== undefined ? this.medicalRecordId : <any>null;
        data["animalId"] = this.animalId !== undefined ? this.animalId : <any>null;
        data["staffId"] = this.staffId !== undefined ? this.staffId : <any>null;
        data["diagnosis"] = this.diagnosis !== undefined ? this.diagnosis : <any>null;
        data["treatment"] = this.treatment !== undefined ? this.treatment : <any>null;
        data["surgeryDetails"] = this.surgeryDetails !== undefined ? this.surgeryDetails : <any>null;
        data["prescribedMedication"] = this.prescribedMedication !== undefined ? this.prescribedMedication : <any>null;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
        data["animal"] = this.animal ? this.animal.toJSON() : <any>null;
        data["staff"] = this.staff ? this.staff.toJSON() : <any>null;
        return data;
    }
}

export interface IMedicalRecord {
    medicalRecordId?: number;
    animalId?: number;
    staffId?: number;
    diagnosis?: string | null;
    treatment?: string | null;
    surgeryDetails?: string | null;
    prescribedMedication?: string | null;
    createdAt?: Date;
    animal?: Animal;
    staff?: Staff;
}

export class MedicalRecordDto implements IMedicalRecordDto {
    medicalRecordId?: number;
    animalId?: number;
    staffId?: number;
    diagnosis?: string | null;
    treatment?: string | null;
    surgeryDetails?: string | null;
    prescribedMedication?: string | null;
    createdAt?: Date;

    constructor(data?: IMedicalRecordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.medicalRecordId = _data["medicalRecordId"] !== undefined ? _data["medicalRecordId"] : <any>null;
            this.animalId = _data["animalId"] !== undefined ? _data["animalId"] : <any>null;
            this.staffId = _data["staffId"] !== undefined ? _data["staffId"] : <any>null;
            this.diagnosis = _data["diagnosis"] !== undefined ? _data["diagnosis"] : <any>null;
            this.treatment = _data["treatment"] !== undefined ? _data["treatment"] : <any>null;
            this.surgeryDetails = _data["surgeryDetails"] !== undefined ? _data["surgeryDetails"] : <any>null;
            this.prescribedMedication = _data["prescribedMedication"] !== undefined ? _data["prescribedMedication"] : <any>null;
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): MedicalRecordDto {
        data = typeof data === 'object' ? data : {};
        let result = new MedicalRecordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["medicalRecordId"] = this.medicalRecordId !== undefined ? this.medicalRecordId : <any>null;
        data["animalId"] = this.animalId !== undefined ? this.animalId : <any>null;
        data["staffId"] = this.staffId !== undefined ? this.staffId : <any>null;
        data["diagnosis"] = this.diagnosis !== undefined ? this.diagnosis : <any>null;
        data["treatment"] = this.treatment !== undefined ? this.treatment : <any>null;
        data["surgeryDetails"] = this.surgeryDetails !== undefined ? this.surgeryDetails : <any>null;
        data["prescribedMedication"] = this.prescribedMedication !== undefined ? this.prescribedMedication : <any>null;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
        return data;
    }
}

export interface IMedicalRecordDto {
    medicalRecordId?: number;
    animalId?: number;
    staffId?: number;
    diagnosis?: string | null;
    treatment?: string | null;
    surgeryDetails?: string | null;
    prescribedMedication?: string | null;
    createdAt?: Date;
}

export class MedicalRecordDtoApiResponse implements IMedicalRecordDtoApiResponse {
    success?: boolean;
    data?: MedicalRecordDto;
    message?: string | null;
    errorMessage?: string | null;

    constructor(data?: IMedicalRecordDtoApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"] !== undefined ? _data["success"] : <any>null;
            this.data = _data["data"] ? MedicalRecordDto.fromJS(_data["data"]) : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.errorMessage = _data["errorMessage"] !== undefined ? _data["errorMessage"] : <any>null;
        }
    }

    static fromJS(data: any): MedicalRecordDtoApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new MedicalRecordDtoApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["errorMessage"] = this.errorMessage !== undefined ? this.errorMessage : <any>null;
        return data;
    }
}

export interface IMedicalRecordDtoApiResponse {
    success?: boolean;
    data?: MedicalRecordDto;
    message?: string | null;
    errorMessage?: string | null;
}

export class MedicalRecordDtoIEnumerableApiResponse implements IMedicalRecordDtoIEnumerableApiResponse {
    success?: boolean;
    data?: MedicalRecordDto[] | null;
    message?: string | null;
    errorMessage?: string | null;

    constructor(data?: IMedicalRecordDtoIEnumerableApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"] !== undefined ? _data["success"] : <any>null;
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(MedicalRecordDto.fromJS(item));
            }
            else {
                this.data = <any>null;
            }
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.errorMessage = _data["errorMessage"] !== undefined ? _data["errorMessage"] : <any>null;
        }
    }

    static fromJS(data: any): MedicalRecordDtoIEnumerableApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new MedicalRecordDtoIEnumerableApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["errorMessage"] = this.errorMessage !== undefined ? this.errorMessage : <any>null;
        return data;
    }
}

export interface IMedicalRecordDtoIEnumerableApiResponse {
    success?: boolean;
    data?: MedicalRecordDto[] | null;
    message?: string | null;
    errorMessage?: string | null;
}

export class Owner implements IOwner {
    ownerId?: number;
    fullName?: string | null;
    address?: string | null;
    phone?: string | null;
    ownerBirthDate?: Date;
    animals?: Animal[] | null;
    invoices?: Invoice[] | null;

    constructor(data?: IOwner) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ownerId = _data["ownerId"] !== undefined ? _data["ownerId"] : <any>null;
            this.fullName = _data["fullName"] !== undefined ? _data["fullName"] : <any>null;
            this.address = _data["address"] !== undefined ? _data["address"] : <any>null;
            this.phone = _data["phone"] !== undefined ? _data["phone"] : <any>null;
            this.ownerBirthDate = _data["ownerBirthDate"] ? new Date(_data["ownerBirthDate"].toString()) : <any>null;
            if (Array.isArray(_data["animals"])) {
                this.animals = [] as any;
                for (let item of _data["animals"])
                    this.animals!.push(Animal.fromJS(item));
            }
            else {
                this.animals = <any>null;
            }
            if (Array.isArray(_data["invoices"])) {
                this.invoices = [] as any;
                for (let item of _data["invoices"])
                    this.invoices!.push(Invoice.fromJS(item));
            }
            else {
                this.invoices = <any>null;
            }
        }
    }

    static fromJS(data: any): Owner {
        data = typeof data === 'object' ? data : {};
        let result = new Owner();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ownerId"] = this.ownerId !== undefined ? this.ownerId : <any>null;
        data["fullName"] = this.fullName !== undefined ? this.fullName : <any>null;
        data["address"] = this.address !== undefined ? this.address : <any>null;
        data["phone"] = this.phone !== undefined ? this.phone : <any>null;
        data["ownerBirthDate"] = this.ownerBirthDate ? this.ownerBirthDate.toISOString() : <any>null;
        if (Array.isArray(this.animals)) {
            data["animals"] = [];
            for (let item of this.animals)
                data["animals"].push(item.toJSON());
        }
        if (Array.isArray(this.invoices)) {
            data["invoices"] = [];
            for (let item of this.invoices)
                data["invoices"].push(item.toJSON());
        }
        return data;
    }
}

export interface IOwner {
    ownerId?: number;
    fullName?: string | null;
    address?: string | null;
    phone?: string | null;
    ownerBirthDate?: Date;
    animals?: Animal[] | null;
    invoices?: Invoice[] | null;
}

export class OwnerDto implements IOwnerDto {
    ownerId?: number;
    fullName?: string | null;
    address?: string | null;
    phone?: string | null;
    ownerBirthDate?: Date;

    constructor(data?: IOwnerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ownerId = _data["ownerId"] !== undefined ? _data["ownerId"] : <any>null;
            this.fullName = _data["fullName"] !== undefined ? _data["fullName"] : <any>null;
            this.address = _data["address"] !== undefined ? _data["address"] : <any>null;
            this.phone = _data["phone"] !== undefined ? _data["phone"] : <any>null;
            this.ownerBirthDate = _data["ownerBirthDate"] ? new Date(_data["ownerBirthDate"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): OwnerDto {
        data = typeof data === 'object' ? data : {};
        let result = new OwnerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ownerId"] = this.ownerId !== undefined ? this.ownerId : <any>null;
        data["fullName"] = this.fullName !== undefined ? this.fullName : <any>null;
        data["address"] = this.address !== undefined ? this.address : <any>null;
        data["phone"] = this.phone !== undefined ? this.phone : <any>null;
        data["ownerBirthDate"] = this.ownerBirthDate ? this.ownerBirthDate.toISOString() : <any>null;
        return data;
    }
}

export interface IOwnerDto {
    ownerId?: number;
    fullName?: string | null;
    address?: string | null;
    phone?: string | null;
    ownerBirthDate?: Date;
}

export class OwnerDtoApiResponse implements IOwnerDtoApiResponse {
    success?: boolean;
    data?: OwnerDto;
    message?: string | null;
    errorMessage?: string | null;

    constructor(data?: IOwnerDtoApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"] !== undefined ? _data["success"] : <any>null;
            this.data = _data["data"] ? OwnerDto.fromJS(_data["data"]) : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.errorMessage = _data["errorMessage"] !== undefined ? _data["errorMessage"] : <any>null;
        }
    }

    static fromJS(data: any): OwnerDtoApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new OwnerDtoApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["errorMessage"] = this.errorMessage !== undefined ? this.errorMessage : <any>null;
        return data;
    }
}

export interface IOwnerDtoApiResponse {
    success?: boolean;
    data?: OwnerDto;
    message?: string | null;
    errorMessage?: string | null;
}

export class OwnerDtoIEnumerableApiResponse implements IOwnerDtoIEnumerableApiResponse {
    success?: boolean;
    data?: OwnerDto[] | null;
    message?: string | null;
    errorMessage?: string | null;

    constructor(data?: IOwnerDtoIEnumerableApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"] !== undefined ? _data["success"] : <any>null;
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(OwnerDto.fromJS(item));
            }
            else {
                this.data = <any>null;
            }
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.errorMessage = _data["errorMessage"] !== undefined ? _data["errorMessage"] : <any>null;
        }
    }

    static fromJS(data: any): OwnerDtoIEnumerableApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new OwnerDtoIEnumerableApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["errorMessage"] = this.errorMessage !== undefined ? this.errorMessage : <any>null;
        return data;
    }
}

export interface IOwnerDtoIEnumerableApiResponse {
    success?: boolean;
    data?: OwnerDto[] | null;
    message?: string | null;
    errorMessage?: string | null;
}

export class Staff implements IStaff {
    staffId?: number;
    fullName?: string | null;
    phone?: string | null;
    address?: string | null;
    staffRoleId?: number;
    cvPath?: string | null;
    appointments?: Appointment[] | null;
    medicalRecords?: MedicalRecord[] | null;
    staffRole?: StaffRole;
    vaccinations?: Vaccination[] | null;

    constructor(data?: IStaff) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.staffId = _data["staffId"] !== undefined ? _data["staffId"] : <any>null;
            this.fullName = _data["fullName"] !== undefined ? _data["fullName"] : <any>null;
            this.phone = _data["phone"] !== undefined ? _data["phone"] : <any>null;
            this.address = _data["address"] !== undefined ? _data["address"] : <any>null;
            this.staffRoleId = _data["staffRoleId"] !== undefined ? _data["staffRoleId"] : <any>null;
            this.cvPath = _data["cvPath"] !== undefined ? _data["cvPath"] : <any>null;
            if (Array.isArray(_data["appointments"])) {
                this.appointments = [] as any;
                for (let item of _data["appointments"])
                    this.appointments!.push(Appointment.fromJS(item));
            }
            else {
                this.appointments = <any>null;
            }
            if (Array.isArray(_data["medicalRecords"])) {
                this.medicalRecords = [] as any;
                for (let item of _data["medicalRecords"])
                    this.medicalRecords!.push(MedicalRecord.fromJS(item));
            }
            else {
                this.medicalRecords = <any>null;
            }
            this.staffRole = _data["staffRole"] ? StaffRole.fromJS(_data["staffRole"]) : <any>null;
            if (Array.isArray(_data["vaccinations"])) {
                this.vaccinations = [] as any;
                for (let item of _data["vaccinations"])
                    this.vaccinations!.push(Vaccination.fromJS(item));
            }
            else {
                this.vaccinations = <any>null;
            }
        }
    }

    static fromJS(data: any): Staff {
        data = typeof data === 'object' ? data : {};
        let result = new Staff();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["staffId"] = this.staffId !== undefined ? this.staffId : <any>null;
        data["fullName"] = this.fullName !== undefined ? this.fullName : <any>null;
        data["phone"] = this.phone !== undefined ? this.phone : <any>null;
        data["address"] = this.address !== undefined ? this.address : <any>null;
        data["staffRoleId"] = this.staffRoleId !== undefined ? this.staffRoleId : <any>null;
        data["cvPath"] = this.cvPath !== undefined ? this.cvPath : <any>null;
        if (Array.isArray(this.appointments)) {
            data["appointments"] = [];
            for (let item of this.appointments)
                data["appointments"].push(item.toJSON());
        }
        if (Array.isArray(this.medicalRecords)) {
            data["medicalRecords"] = [];
            for (let item of this.medicalRecords)
                data["medicalRecords"].push(item.toJSON());
        }
        data["staffRole"] = this.staffRole ? this.staffRole.toJSON() : <any>null;
        if (Array.isArray(this.vaccinations)) {
            data["vaccinations"] = [];
            for (let item of this.vaccinations)
                data["vaccinations"].push(item.toJSON());
        }
        return data;
    }
}

export interface IStaff {
    staffId?: number;
    fullName?: string | null;
    phone?: string | null;
    address?: string | null;
    staffRoleId?: number;
    cvPath?: string | null;
    appointments?: Appointment[] | null;
    medicalRecords?: MedicalRecord[] | null;
    staffRole?: StaffRole;
    vaccinations?: Vaccination[] | null;
}

export class StaffDto implements IStaffDto {
    staffId?: number;
    fullName?: string | null;
    phone?: string | null;
    address?: string | null;
    staffRoleId?: number;
    cvPath?: string | null;

    constructor(data?: IStaffDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.staffId = _data["staffId"] !== undefined ? _data["staffId"] : <any>null;
            this.fullName = _data["fullName"] !== undefined ? _data["fullName"] : <any>null;
            this.phone = _data["phone"] !== undefined ? _data["phone"] : <any>null;
            this.address = _data["address"] !== undefined ? _data["address"] : <any>null;
            this.staffRoleId = _data["staffRoleId"] !== undefined ? _data["staffRoleId"] : <any>null;
            this.cvPath = _data["cvPath"] !== undefined ? _data["cvPath"] : <any>null;
        }
    }

    static fromJS(data: any): StaffDto {
        data = typeof data === 'object' ? data : {};
        let result = new StaffDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["staffId"] = this.staffId !== undefined ? this.staffId : <any>null;
        data["fullName"] = this.fullName !== undefined ? this.fullName : <any>null;
        data["phone"] = this.phone !== undefined ? this.phone : <any>null;
        data["address"] = this.address !== undefined ? this.address : <any>null;
        data["staffRoleId"] = this.staffRoleId !== undefined ? this.staffRoleId : <any>null;
        data["cvPath"] = this.cvPath !== undefined ? this.cvPath : <any>null;
        return data;
    }
}

export interface IStaffDto {
    staffId?: number;
    fullName?: string | null;
    phone?: string | null;
    address?: string | null;
    staffRoleId?: number;
    cvPath?: string | null;
}

export class StaffDtoApiResponse implements IStaffDtoApiResponse {
    success?: boolean;
    data?: StaffDto;
    message?: string | null;
    errorMessage?: string | null;

    constructor(data?: IStaffDtoApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"] !== undefined ? _data["success"] : <any>null;
            this.data = _data["data"] ? StaffDto.fromJS(_data["data"]) : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.errorMessage = _data["errorMessage"] !== undefined ? _data["errorMessage"] : <any>null;
        }
    }

    static fromJS(data: any): StaffDtoApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new StaffDtoApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["errorMessage"] = this.errorMessage !== undefined ? this.errorMessage : <any>null;
        return data;
    }
}

export interface IStaffDtoApiResponse {
    success?: boolean;
    data?: StaffDto;
    message?: string | null;
    errorMessage?: string | null;
}

export class StaffDtoIEnumerableApiResponse implements IStaffDtoIEnumerableApiResponse {
    success?: boolean;
    data?: StaffDto[] | null;
    message?: string | null;
    errorMessage?: string | null;

    constructor(data?: IStaffDtoIEnumerableApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"] !== undefined ? _data["success"] : <any>null;
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(StaffDto.fromJS(item));
            }
            else {
                this.data = <any>null;
            }
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.errorMessage = _data["errorMessage"] !== undefined ? _data["errorMessage"] : <any>null;
        }
    }

    static fromJS(data: any): StaffDtoIEnumerableApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new StaffDtoIEnumerableApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["errorMessage"] = this.errorMessage !== undefined ? this.errorMessage : <any>null;
        return data;
    }
}

export interface IStaffDtoIEnumerableApiResponse {
    success?: boolean;
    data?: StaffDto[] | null;
    message?: string | null;
    errorMessage?: string | null;
}

export class StaffRole implements IStaffRole {
    staffRoleId?: number;
    roleName?: string | null;
    staff?: Staff[] | null;

    constructor(data?: IStaffRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.staffRoleId = _data["staffRoleId"] !== undefined ? _data["staffRoleId"] : <any>null;
            this.roleName = _data["roleName"] !== undefined ? _data["roleName"] : <any>null;
            if (Array.isArray(_data["staff"])) {
                this.staff = [] as any;
                for (let item of _data["staff"])
                    this.staff!.push(Staff.fromJS(item));
            }
            else {
                this.staff = <any>null;
            }
        }
    }

    static fromJS(data: any): StaffRole {
        data = typeof data === 'object' ? data : {};
        let result = new StaffRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["staffRoleId"] = this.staffRoleId !== undefined ? this.staffRoleId : <any>null;
        data["roleName"] = this.roleName !== undefined ? this.roleName : <any>null;
        if (Array.isArray(this.staff)) {
            data["staff"] = [];
            for (let item of this.staff)
                data["staff"].push(item.toJSON());
        }
        return data;
    }
}

export interface IStaffRole {
    staffRoleId?: number;
    roleName?: string | null;
    staff?: Staff[] | null;
}

export class StaffRoleDto implements IStaffRoleDto {
    staffRoleId?: number;
    roleName?: string | null;

    constructor(data?: IStaffRoleDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.staffRoleId = _data["staffRoleId"] !== undefined ? _data["staffRoleId"] : <any>null;
            this.roleName = _data["roleName"] !== undefined ? _data["roleName"] : <any>null;
        }
    }

    static fromJS(data: any): StaffRoleDto {
        data = typeof data === 'object' ? data : {};
        let result = new StaffRoleDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["staffRoleId"] = this.staffRoleId !== undefined ? this.staffRoleId : <any>null;
        data["roleName"] = this.roleName !== undefined ? this.roleName : <any>null;
        return data;
    }
}

export interface IStaffRoleDto {
    staffRoleId?: number;
    roleName?: string | null;
}

export class StaffRoleDtoApiResponse implements IStaffRoleDtoApiResponse {
    success?: boolean;
    data?: StaffRoleDto;
    message?: string | null;
    errorMessage?: string | null;

    constructor(data?: IStaffRoleDtoApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"] !== undefined ? _data["success"] : <any>null;
            this.data = _data["data"] ? StaffRoleDto.fromJS(_data["data"]) : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.errorMessage = _data["errorMessage"] !== undefined ? _data["errorMessage"] : <any>null;
        }
    }

    static fromJS(data: any): StaffRoleDtoApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new StaffRoleDtoApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["errorMessage"] = this.errorMessage !== undefined ? this.errorMessage : <any>null;
        return data;
    }
}

export interface IStaffRoleDtoApiResponse {
    success?: boolean;
    data?: StaffRoleDto;
    message?: string | null;
    errorMessage?: string | null;
}

export class StaffRoleDtoIEnumerableApiResponse implements IStaffRoleDtoIEnumerableApiResponse {
    success?: boolean;
    data?: StaffRoleDto[] | null;
    message?: string | null;
    errorMessage?: string | null;

    constructor(data?: IStaffRoleDtoIEnumerableApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"] !== undefined ? _data["success"] : <any>null;
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(StaffRoleDto.fromJS(item));
            }
            else {
                this.data = <any>null;
            }
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.errorMessage = _data["errorMessage"] !== undefined ? _data["errorMessage"] : <any>null;
        }
    }

    static fromJS(data: any): StaffRoleDtoIEnumerableApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new StaffRoleDtoIEnumerableApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["errorMessage"] = this.errorMessage !== undefined ? this.errorMessage : <any>null;
        return data;
    }
}

export interface IStaffRoleDtoIEnumerableApiResponse {
    success?: boolean;
    data?: StaffRoleDto[] | null;
    message?: string | null;
    errorMessage?: string | null;
}

export class StaffWithRoleDTO implements IStaffWithRoleDTO {
    staffId?: number;
    fullName?: string | null;
    phone?: string | null;
    address?: string | null;
    staffRoleId?: number;
    roleName?: string | null;

    constructor(data?: IStaffWithRoleDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.staffId = _data["staffId"] !== undefined ? _data["staffId"] : <any>null;
            this.fullName = _data["fullName"] !== undefined ? _data["fullName"] : <any>null;
            this.phone = _data["phone"] !== undefined ? _data["phone"] : <any>null;
            this.address = _data["address"] !== undefined ? _data["address"] : <any>null;
            this.staffRoleId = _data["staffRoleId"] !== undefined ? _data["staffRoleId"] : <any>null;
            this.roleName = _data["roleName"] !== undefined ? _data["roleName"] : <any>null;
        }
    }

    static fromJS(data: any): StaffWithRoleDTO {
        data = typeof data === 'object' ? data : {};
        let result = new StaffWithRoleDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["staffId"] = this.staffId !== undefined ? this.staffId : <any>null;
        data["fullName"] = this.fullName !== undefined ? this.fullName : <any>null;
        data["phone"] = this.phone !== undefined ? this.phone : <any>null;
        data["address"] = this.address !== undefined ? this.address : <any>null;
        data["staffRoleId"] = this.staffRoleId !== undefined ? this.staffRoleId : <any>null;
        data["roleName"] = this.roleName !== undefined ? this.roleName : <any>null;
        return data;
    }
}

export interface IStaffWithRoleDTO {
    staffId?: number;
    fullName?: string | null;
    phone?: string | null;
    address?: string | null;
    staffRoleId?: number;
    roleName?: string | null;
}

export class UserDto implements IUserDto {
    userId?: number;
    userRoleId?: number;
    fullName?: string | null;
    username?: string | null;
    email?: string | null;
    password?: string | null;
    createdAt?: Date | null;
    lastLogin?: Date | null;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"] !== undefined ? _data["userId"] : <any>null;
            this.userRoleId = _data["userRoleId"] !== undefined ? _data["userRoleId"] : <any>null;
            this.fullName = _data["fullName"] !== undefined ? _data["fullName"] : <any>null;
            this.username = _data["username"] !== undefined ? _data["username"] : <any>null;
            this.email = _data["email"] !== undefined ? _data["email"] : <any>null;
            this.password = _data["password"] !== undefined ? _data["password"] : <any>null;
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>null;
            this.lastLogin = _data["lastLogin"] ? new Date(_data["lastLogin"].toString()) : <any>null;
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId !== undefined ? this.userId : <any>null;
        data["userRoleId"] = this.userRoleId !== undefined ? this.userRoleId : <any>null;
        data["fullName"] = this.fullName !== undefined ? this.fullName : <any>null;
        data["username"] = this.username !== undefined ? this.username : <any>null;
        data["email"] = this.email !== undefined ? this.email : <any>null;
        data["password"] = this.password !== undefined ? this.password : <any>null;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>null;
        data["lastLogin"] = this.lastLogin ? this.lastLogin.toISOString() : <any>null;
        return data;
    }
}

export interface IUserDto {
    userId?: number;
    userRoleId?: number;
    fullName?: string | null;
    username?: string | null;
    email?: string | null;
    password?: string | null;
    createdAt?: Date | null;
    lastLogin?: Date | null;
}

export class UserDtoApiResponse implements IUserDtoApiResponse {
    success?: boolean;
    data?: UserDto;
    message?: string | null;
    errorMessage?: string | null;

    constructor(data?: IUserDtoApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"] !== undefined ? _data["success"] : <any>null;
            this.data = _data["data"] ? UserDto.fromJS(_data["data"]) : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.errorMessage = _data["errorMessage"] !== undefined ? _data["errorMessage"] : <any>null;
        }
    }

    static fromJS(data: any): UserDtoApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserDtoApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["errorMessage"] = this.errorMessage !== undefined ? this.errorMessage : <any>null;
        return data;
    }
}

export interface IUserDtoApiResponse {
    success?: boolean;
    data?: UserDto;
    message?: string | null;
    errorMessage?: string | null;
}

export class UserDtoIEnumerableApiResponse implements IUserDtoIEnumerableApiResponse {
    success?: boolean;
    data?: UserDto[] | null;
    message?: string | null;
    errorMessage?: string | null;

    constructor(data?: IUserDtoIEnumerableApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"] !== undefined ? _data["success"] : <any>null;
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(UserDto.fromJS(item));
            }
            else {
                this.data = <any>null;
            }
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.errorMessage = _data["errorMessage"] !== undefined ? _data["errorMessage"] : <any>null;
        }
    }

    static fromJS(data: any): UserDtoIEnumerableApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UserDtoIEnumerableApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["errorMessage"] = this.errorMessage !== undefined ? this.errorMessage : <any>null;
        return data;
    }
}

export interface IUserDtoIEnumerableApiResponse {
    success?: boolean;
    data?: UserDto[] | null;
    message?: string | null;
    errorMessage?: string | null;
}

export class Vaccination implements IVaccination {
    vaccinationId?: number;
    animalId?: number;
    vaccineName?: string | null;
    vaccinationDate?: Date;
    nextDueDate?: Date;
    staffId?: number;
    animal?: Animal;
    staff?: Staff;

    constructor(data?: IVaccination) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.vaccinationId = _data["vaccinationId"] !== undefined ? _data["vaccinationId"] : <any>null;
            this.animalId = _data["animalId"] !== undefined ? _data["animalId"] : <any>null;
            this.vaccineName = _data["vaccineName"] !== undefined ? _data["vaccineName"] : <any>null;
            this.vaccinationDate = _data["vaccinationDate"] ? new Date(_data["vaccinationDate"].toString()) : <any>null;
            this.nextDueDate = _data["nextDueDate"] ? new Date(_data["nextDueDate"].toString()) : <any>null;
            this.staffId = _data["staffId"] !== undefined ? _data["staffId"] : <any>null;
            this.animal = _data["animal"] ? Animal.fromJS(_data["animal"]) : <any>null;
            this.staff = _data["staff"] ? Staff.fromJS(_data["staff"]) : <any>null;
        }
    }

    static fromJS(data: any): Vaccination {
        data = typeof data === 'object' ? data : {};
        let result = new Vaccination();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vaccinationId"] = this.vaccinationId !== undefined ? this.vaccinationId : <any>null;
        data["animalId"] = this.animalId !== undefined ? this.animalId : <any>null;
        data["vaccineName"] = this.vaccineName !== undefined ? this.vaccineName : <any>null;
        data["vaccinationDate"] = this.vaccinationDate ? formatDate(this.vaccinationDate) : <any>null;
        data["nextDueDate"] = this.nextDueDate ? formatDate(this.nextDueDate) : <any>null;
        data["staffId"] = this.staffId !== undefined ? this.staffId : <any>null;
        data["animal"] = this.animal ? this.animal.toJSON() : <any>null;
        data["staff"] = this.staff ? this.staff.toJSON() : <any>null;
        return data;
    }
}

export interface IVaccination {
    vaccinationId?: number;
    animalId?: number;
    vaccineName?: string | null;
    vaccinationDate?: Date;
    nextDueDate?: Date;
    staffId?: number;
    animal?: Animal;
    staff?: Staff;
}

export class VaccinationDto implements IVaccinationDto {
    vaccinationId?: number;
    animalId?: number;
    vaccineName?: string | null;
    vaccinationDate?: Date;
    nextDueDate?: Date;
    staffId?: number;

    constructor(data?: IVaccinationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.vaccinationId = _data["vaccinationId"] !== undefined ? _data["vaccinationId"] : <any>null;
            this.animalId = _data["animalId"] !== undefined ? _data["animalId"] : <any>null;
            this.vaccineName = _data["vaccineName"] !== undefined ? _data["vaccineName"] : <any>null;
            this.vaccinationDate = _data["vaccinationDate"] ? new Date(_data["vaccinationDate"].toString()) : <any>null;
            this.nextDueDate = _data["nextDueDate"] ? new Date(_data["nextDueDate"].toString()) : <any>null;
            this.staffId = _data["staffId"] !== undefined ? _data["staffId"] : <any>null;
        }
    }

    static fromJS(data: any): VaccinationDto {
        data = typeof data === 'object' ? data : {};
        let result = new VaccinationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vaccinationId"] = this.vaccinationId !== undefined ? this.vaccinationId : <any>null;
        data["animalId"] = this.animalId !== undefined ? this.animalId : <any>null;
        data["vaccineName"] = this.vaccineName !== undefined ? this.vaccineName : <any>null;
        data["vaccinationDate"] = this.vaccinationDate ? formatDate(this.vaccinationDate) : <any>null;
        data["nextDueDate"] = this.nextDueDate ? formatDate(this.nextDueDate) : <any>null;
        data["staffId"] = this.staffId !== undefined ? this.staffId : <any>null;
        return data;
    }
}

export interface IVaccinationDto {
    vaccinationId?: number;
    animalId?: number;
    vaccineName?: string | null;
    vaccinationDate?: Date;
    nextDueDate?: Date;
    staffId?: number;
}

export class VaccinationDtoApiResponse implements IVaccinationDtoApiResponse {
    success?: boolean;
    data?: VaccinationDto;
    message?: string | null;
    errorMessage?: string | null;

    constructor(data?: IVaccinationDtoApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"] !== undefined ? _data["success"] : <any>null;
            this.data = _data["data"] ? VaccinationDto.fromJS(_data["data"]) : <any>null;
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.errorMessage = _data["errorMessage"] !== undefined ? _data["errorMessage"] : <any>null;
        }
    }

    static fromJS(data: any): VaccinationDtoApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new VaccinationDtoApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        data["data"] = this.data ? this.data.toJSON() : <any>null;
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["errorMessage"] = this.errorMessage !== undefined ? this.errorMessage : <any>null;
        return data;
    }
}

export interface IVaccinationDtoApiResponse {
    success?: boolean;
    data?: VaccinationDto;
    message?: string | null;
    errorMessage?: string | null;
}

export class VaccinationDtoIEnumerableApiResponse implements IVaccinationDtoIEnumerableApiResponse {
    success?: boolean;
    data?: VaccinationDto[] | null;
    message?: string | null;
    errorMessage?: string | null;

    constructor(data?: IVaccinationDtoIEnumerableApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"] !== undefined ? _data["success"] : <any>null;
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(VaccinationDto.fromJS(item));
            }
            else {
                this.data = <any>null;
            }
            this.message = _data["message"] !== undefined ? _data["message"] : <any>null;
            this.errorMessage = _data["errorMessage"] !== undefined ? _data["errorMessage"] : <any>null;
        }
    }

    static fromJS(data: any): VaccinationDtoIEnumerableApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new VaccinationDtoIEnumerableApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success !== undefined ? this.success : <any>null;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["message"] = this.message !== undefined ? this.message : <any>null;
        data["errorMessage"] = this.errorMessage !== undefined ? this.errorMessage : <any>null;
        return data;
    }
}

export interface IVaccinationDtoIEnumerableApiResponse {
    success?: boolean;
    data?: VaccinationDto[] | null;
    message?: string | null;
    errorMessage?: string | null;
}

function formatDate(d: Date) {
    return d.getFullYear() + '-' + 
        (d.getMonth() < 9 ? ('0' + (d.getMonth()+1)) : (d.getMonth()+1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}